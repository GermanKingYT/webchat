@model webchat.Models.IndexModel

@using Recaptcha;
@using webchat.Helpers;

@using(Html.BeginForm("Index", "Index", FormMethod.Post)){
    @Html.AntiForgeryToken()

    @Html.TextBox("nick", null, new { 
        tabindex = 1,
        placeholder = Resources.Strings.NickPlaceHolder,
    })
    
    <br />

    @Html.TextBoxFor(x => x.Rooms.Rooms, new {
        tabindex = 2,
        placeholder = Resources.Strings.RoomsPlaceHolder,
        autocomplete = "off",
        @Value = Model.Rooms.Rooms.Count != 0 ? String.Join(" ", Model.Rooms.Rooms.ToArray()) : "",
    })
    <span class="help-block">@Resources.Strings.JoinRoomsHelpBlock</span>
    
    @Html.Raw(Html.GenerateCaptcha("captcha", "clean"))
    
    <br />
    <input type="submit" name="submit" class="btn btn-primary" value="@Resources.Strings.ConnectButtonText"/>
}

@if(!ViewData.ModelState.IsValid) {
    var errors = ViewData.ModelState.Values.SelectMany(v => v.Errors).Select(t => t.ErrorMessage);
    @Html.ErrorSummary("form-errors", errors.ToList(), null, new { @class = "alert alert-error" })
}

<script type="text/javascript" src="@Url.Content("~/Static/Js/lib/bootstrap.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Static/Js/helpers.js")"></script>
<script type="text/javascript">
    set_spacing();

    Data = {
        rooms: JSON.parse('@Html.Raw(Model.AvailableRooms != null ? Json.Encode(Model.AvailableRooms.Rooms) : "[]")'),
    };

    $('#Rooms_Rooms').attr('data-provide', 'typeahead');
    var autocomplete = $('#Rooms_Rooms').typeahead();
    autocomplete.data('typeahead').source = Data.rooms;
    
    override_typeahead('#Rooms_Rooms');
</script>